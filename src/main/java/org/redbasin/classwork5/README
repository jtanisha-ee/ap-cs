Introduction
============

This folder contains a program that computes the sum of the first
N terms of an infinite series that looks like:

1 + 1/2 + 1/3 + 1/4 + 1/5 + ....

The above series has 5 terms. This particular series is a divergent
series. This means, as N approaches infinity, the sum approaches infinity.

Exercise 1
==========

Successively increase the size of NUM_TERMS to 100, 1000, 10000
and so on, observe how the sum keeps increasing.

Exercise 2
==========

Set the value of NUM_TERMS to 3 billion. (9 zeroes). And run the
program again, to see what happens. Does the program terminate?
Please explain the reason. How do you fix the program?

Exercise 3
==========

Refactor/Copy existing program to create a second program called
InfiniteSeriesFiniteSum. This time create a different series:

1 + 1/2 + 1/4 + 1/8 + 1/16 + ...

Once you write the program, you will observe that sum converges
to 2 when NUM_TERMS converges to infinity. Since double has
finite precision, the value of the sum approaches 2 but never is
equal to 2. You will also observe that at sum point the sum does
not change when the number of terms reaches M. Can you figure out
what is the value of M?